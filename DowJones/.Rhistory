# Salva il dataframe nel file "rendimenti.csv"
# Specifica il nome del file con la data corrente (salvo i dati in dowjones-<dataodierna>)
rendimenti <- paste("rendimentigiornalieri_", format(Sys.Date(), "%d-%m-%Y"), ".csv", sep = "")
# Specifica il percorso relativo alla sottocartella (questo csv lo salvo nella sottocartella "data")
datafolder <- "data"
#specifico quindi il path completo del file, che parte dalla directory attuale, va in "data", e salva nel csv precedentemente dichiarato.
rendimenti_path <- file.path(getwd(), datafolder, rendimenti)
write.csv(returns_data, rendimenti_path, row.names = TRUE)
# DOW JONES INDEX ANALYSIS
###################### Prelievo dei dati da Yahoo Finance###############
# Calcolo le date di inizio e fine per l'intervallo di tre anni
start_date <- as.Date(Sys.Date() - 3*365)
end_date <- Sys.Date()
# Formato le date nel formato richiesto dall'URL
start_timestamp <- as.POSIXct(start_date)
end_timestamp <- as.POSIXct(end_date)
# Costruisco l'URL del file CSV utilizzando le date di inizio e fine
url <- paste0("https://query1.finance.yahoo.com/v7/finance/download/%5EDJI?period1=",
as.numeric(start_timestamp), "&period2=",
as.numeric(end_timestamp), "&interval=1d&events=history")
# Imposto il percorso di destinazione per il salvataggio del file CSV
# Imposto la directory di lavoro sulla directory attuale (ovvero la cartella "dowjones")
current_file <- normalizePath(rstudioapi::getSourceEditorContext()$path)
print(current_file)
current_dir <- dirname(current_file)
print(current_dir)
# Specifica il nome del file con la data corrente (salvo i dati in dowjones-<dataodierna>)
nome_file <- paste("dowjones_", format(Sys.Date(), "%d-%m-%Y"), ".csv", sep = "")
# Specifica il percorso relativo alla sottocartella (questo csv lo salvo nella sottocartella "data")
datafolder <- "data"
#specifico quindi il path completo del file, che parte dalla directory attuale, va in "data", e salva nel csv precedentemente dichiarato.
file_path <- file.path(current_dir, datafolder, nome_file)
# Scarica il file CSV dell'indice Dow Jones degli ultimi tre anni
download.file(url, destfile = file_path, method = "auto")
# Leggi il file CSV e visualizza i dati
dow_data <- read.csv(file_path)
head(dow_data)
# Leggi il file CSV esistente
data <- read.csv(file_path)
# Aggiungi la colonna "indice riga"
data$index <- 1:nrow(data)
# Riorganizza l'ordine delle colonne
data <- data[, c("index", names(data)[-ncol(data)])]
# Salva il file CSV modificato
write.csv(data, file_path, row.names = FALSE)
###################### Grafico del valore "Close" degli ultimi 3 anni#####################################
# Leggi il file CSV con i dati dell'indice Dow Jones
dow_data <- read.csv(file_path)
# Converti la colonna delle date in formato di data
dow_data$Date <- as.Date(dow_data$Date)
# Crea un nuovo grafico con titolo
plot(dow_data$Date, dow_data$Close, type = "l", col = "blue", xlab = "Data", ylab = "Close Value",
main = "Andamento dell'indice Dow Jones ^DJI")
#lines(dow_data$Date, dow_data$High, col = "green", lty = "dashed")
#lines(dow_data$Date, dow_data$Low, col = "red")
# Aggiungi una legenda
#legend("topleft", legend = c("Open", "High", "Low"), col = c("blue", "green", "red"), lty = c("solid", "dashed", "solid"))
###### Libraries######
library(timeDate)
library(timeSeries)
library(fBasics)
library(fOptions)
library(tibble)
library("data.table")
library(dplyr)
library(quantmod)
library(reshape2)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(cowplot)
library(urca)
library(moments)
library(lmtest)
###### Paths #####
# Imposto la directory di lavoro sulla directory attuale (ovvero la cartella "dowjones")
current_file <- normalizePath(rstudioapi::getSourceEditorContext()$path)
current_dir <- dirname(current_file)
# Specifica il percorso relativo alla sottocartella (questo csv lo salvo nella sottocartella "data")
datafolder <- "data"
optionsfolder <- "options"
fedinvestfolder <- "fedinvest"
###### Prelievo dei dati del Dow Jones Index da Yahoo Finance + grafico ###############
# Calcolo le date di inizio e fine per l'intervallo di tre anni, a partire dal 2023-07-15
start_date <- "2020-07-15"
end_date <- "2023-07-15"
# Formatto le date nel formato richiesto dall'URL
start_timestamp <- as.POSIXct(start_date)
end_timestamp <- as.POSIXct(end_date)
# Costruisco l'URL del file CSV utilizzando le date di inizio e fine
url <- paste0("https://query1.finance.yahoo.com/v7/finance/download/%5EDJI?period1=",
as.numeric(start_timestamp), "&period2=",
as.numeric(end_timestamp), "&interval=1d&events=history")
# Specifica il nome del file con la data corrente (salvo i dati in dowjones-<dataodierna>)
dow_jones_file <- paste("dowjones_", format(Sys.Date(), "%d-%m-%Y"), ".csv", sep = "")
#specifico quindi il path completo del file, che parte dalla directory attuale, va in "data", e salva nel csv precedentemente dichiarato.
dow_jones_path <- file.path(current_dir, datafolder, dow_jones_file)
# Scarica il file CSV dell'indice Dow Jones degli ultimi tre anni
download.file(url, destfile = dow_jones_path, method = "auto")
# Leggi il file CSV e visualizza i dati
dow_data <- read.csv(dow_jones_path)
head(dow_data)
# Aggiungi la colonna "indice riga"
dow_data$index <- 1:nrow(dow_data)
# Riorganizza l'ordine delle colonne
dow_data <- dow_data[, c("index", names(dow_data)[-ncol(dow_data)])]
# Salva il file CSV modificato
write.csv(dow_data, dow_jones_path, row.names = FALSE)
# Converti la colonna delle date in formato di data
dow_data$Date <- as.Date(dow_data$Date)
# Crea un nuovo grafico con titolo
plot(dow_data$Date, dow_data$Close, type = "l", col = "blue", xlab = "Data", ylab = "Close Value",
main = "Andamento dell'indice Dow Jones ^DJX")
###### Rendimenti giornalieri Logaritmici (grafico + csv)#####################################################
#Utilizzo "dow_data" prodotto sopra, calcolo il rendimento logaritmico
dow_data$Log_Return <-  c(0, diff(log(dow_data$Close)))
# Crea un grafico dei rendimenti giornalieri
plot(dow_data$Date, dow_data$Log_Return, type = "l",col = "black", xlab = "Data", ylab = "Rendimento giornaliero log", main = "Rendimento giornaliero log")
# Aggiungi una griglia al grafico
grid()
#Salvo questi dati in un csv, associandoli prima ad un dataframe contenente la coppia <data, rendimento giornaliero logaritmico>
# Creazione del dataframe dei rendimenti giornalieri
returns_data_log <- data.frame(dow_data$Date, dow_data$Log_Return)
head(returns_data_log)
# Rinomina le colonne del dataframe
colnames(returns_data_log) <- c("data", "rendimento giornaliero log")
# Salva il dataframe nel file "rendimenti.csv"
# Specifica il nome del file con la data corrente (salvo i dati in dowjones-<dataodierna>)
rendimenti_log_file <- paste("rendimentigiornalieriLOG_", format(Sys.Date(), "%d-%m-%Y"), ".csv", sep = "")
#specifico quindi il path completo del file, che parte dalla directory attuale, va in "data", e salva nel csv precedentemente dichiarato.
rendimenti_log_path <- file.path(current_dir, datafolder, rendimenti_log_file)
write.csv(returns_data_log, rendimenti_log_path, row.names = TRUE)
###### Prelievo delle opzioni di DJX #####
# Il nome della variabile contenente i dati include il giorno corrente in cui li scarico.
# Ottengo la data odierna
data_odierna <- format(Sys.Date(), "%Y-%m-%d")
# Crea il nome della variabile con la data odierna
DJX_Opt <- paste0("DJX_Opt_", data_odierna)
DJX_Opt <- getOptionChain("^DJX", Exp="2023-09-15", src='yahoo')
class(DJX_Opt)
length(DJX_Opt)
show(DJX_Opt[[1]])
class(DJX_Opt[[1]])
nrow(DJX_Opt[[1]])
show(DJX_Opt[[2]])
class(DJX_Opt[[2]])
nrow(DJX_Opt[[2]])
show(DJX_Opt[[1]]$Strike)
show(DJX_Opt[[2]]$Strike)
Strike <- sort(union(DJX_Opt[[1]]$Strike, DJX_Opt[[2]]$Strike))
show(Strike)
length(Strike)
Call_Indx <- sapply(Strike, function(x) which(DJX_Opt[[1]]$Strike==x)[1])
Put_Indx <- sapply(Strike, function(x) which(DJX_Opt[[2]]$Strike==x)[1])
DJX_Opt_df <- data.frame(Indx=1:length(Strike),
Call_ContractID=DJX_Opt[[1]]$ContractID[Call_Indx],
Call_Bid=DJX_Opt[[1]]$Bid[Call_Indx],
Call_Ask=DJX_Opt[[1]]$Ask[Call_Indx],
Call_Vol=DJX_Opt[[1]]$Vol[Call_Indx],
Call_OI=DJX_Opt[[1]]$OI[Call_Indx],
Call_PrChg=DJX_Opt[[1]]$Chg[Call_Indx],
Call_PrChgPct=DJX_Opt[[1]]$ChgPct[Call_Indx],
Call_LastTrTime=DJX_Opt[[1]]$LastTradeTime[Call_Indx],
Call_LastPr=DJX_Opt[[1]]$Last[Call_Indx],
Call_ImplVol=DJX_Opt[[1]]$IV[Call_Indx],
Call_ITM=DJX_Opt[[1]]$ITM[Call_Indx],
Strike=Strike,
Put_ITM=DJX_Opt[[2]]$ITM[Put_Indx],
Put_ImplVol=DJX_Opt[[2]]$IV[Put_Indx],
Put_LastPr=DJX_Opt[[2]]$Last[Put_Indx],
Put_LastTrTime=DJX_Opt[[2]]$LastTradeTime[Put_Indx],
Put_PrChgPct=DJX_Opt[[2]]$ChgPct[Put_Indx],
Put_PrChg=DJX_Opt[[2]]$Chg[Put_Indx],
Put_OI=DJX_Opt[[2]]$OI[Put_Indx],
Put_Vol=DJX_Opt[[2]]$Vol[Put_Indx],
Put_Ask=DJX_Opt[[2]]$Ask[Put_Indx],
Put_Bid=DJX_Opt[[2]]$Bid[Put_Indx],
Put_ContractID=DJX_Opt[[2]]$ContractID[Put_Indx])
head(DJX_Opt_df,10)
tail(DJX_Opt_df,10)
#salvo il tutto nella sottodirectory "options"
file_path <- file.path(current_dir, optionsfolder, paste0("DJX_Opt_", data_odierna,".csv"))
head(file_path)
write.csv(DJX_Opt_df, file_path)
###### Plot dei vari strike appena scaricati ####
#mi metto nella sottocartella "options" e prelevo tutti i file posseduti contenenti le options di JDX
options_path <- file.path(current_dir,optionsfolder)
option_files <- sort(list.files(path = options_path, pattern = "DJX_Opt_", full.names = TRUE))
# index day è associato al "giorno" dell'osservazione, strike_values conterrà gli strike che osserverò
index_day<-0
strike_values <- c()
strike_file <- file.path(current_dir,optionsfolder, "StrikeStory.csv") #qui scriverò la "storia" dei vari strike
# Loop attraverso i file CSV
for (file in option_files) {
# Estrai la parte variabile (data) dal nome del file utilizzando substr
nome_file <- basename(file)
posizione_trattino <- max(gregexpr("_", nome_file)[[1]])
parte_variabile <- substr(nome_file, posizione_trattino + 1, nchar(nome_file) - 4)
# Converti la parte variabile in un valore "data" e aggiorna la variabile data_variabile
data_variabile <- as.Date(parte_variabile)
# Leggi i dati dal file CSV
dati <- read.csv(file)
# Rimuovi le righe con Call_LastPr uguale a NA
dati <- dati %>% filter(!is.na(Call_LastPr))
if (index_day == 0) {
col_name <- "Strike"
strike_values <<- c(strike_values, dati[[col_name]]) #prelevo tutti gli strike non nulli
} #adesso prendo i "last price Call"
call_last_pr_values <- c()
col_name_2 <- "Call_LastPr"
for (val in strike_values){
filtered_rows <- dati %>% filter(.data[[col_name]] == val)
if (nrow(filtered_rows) > 0) {
call_last_pr_values <- c(call_last_pr_values, filtered_rows[[col_name_2]])
} else {
# Se non ci sono righe corrispondenti, aggiungi un NA
call_last_pr_values <- c(call_last_pr_values, NA)
}
}
if (index_day == 0){ # se index_day == 0, vuol dire che sto cercando gli strike, allora sono all'inizio, quindi creo lo strike_frame
strike_frame <- data.frame(call_last_pr_values)
} else{ #lo strike_frame già esiste, devo solo aggiornarlo
strike_frame <-cbind(strike_frame,call_last_pr_values)
}
index_day <- index_day + 1 #aggiorno l'indice dei giorni passati
write_csv(strike_frame, strike_file)
}
# Creazione del grafico
plot(1, 1, type = "n", xlim = c(1,ncol(strike_frame)-1), ylim = c(min(strike_frame), max(strike_frame)),
xlab = "Giorni dall'osservazione iniziale", ylab = "LastCallPrice",
main = "Evoluzione del lastCallPrice in funzione degli strike")
# Aggiunta delle linee per ogni riga del dataframe
for (i in 1:nrow(strike_frame)) {
lines(0:(ncol(strike_frame)-1), strike_frame[i,], col = i)
}
print(strike_frame)
print(strike_frame)
varianze <- apply(strike_frame, 1, var)
clean_strike_frame <- subset(strike_frame, varianze != 0)
print(clean_strike_frame)
# Creazione del grafico
plot(1, 1, type = "n", xlim = c(1,ncol(clean_strike_frame)-1), ylim = c(min(clean_strike_frame), max(clean_strike_frame)),
xlab = "Giorni dall'osservazione iniziale", ylab = "LastCallPrice",
main = "Evoluzione del lastCallPrice in funzione degli strike")
# Aggiunta delle linee per ogni riga del dataframe
for (i in 1:nrow(clean_strike_frame)) {
lines(0:(ncol(clean_strike_frame)-1), clean_strike_frame[i,], col = i)
}
# Creazione del grafico
plot(1, 1, type = "n", xlim = c(1,ncol(strike_frame)-1), ylim = c(min(strike_frame), max(strike_frame)),
xlab = "Giorni dall'osservazione iniziale", ylab = "LastCallPrice",
main = "Evoluzione del lastCallPrice in funzione degli strike")
# Aggiunta delle linee per ogni riga del dataframe
for (i in 1:nrow(strike_frame)) {
lines(0:(ncol(strike_frame)-1), strike_frame[i,], col = i)
#mi metto nella sottocartella "options" e prelevo tutti i file posseduti contenenti le options di JDX
options_path <- file.path(current_dir,optionsfolder)
option_files <- sort(list.files(path = options_path, pattern = "DJX_Opt_", full.names = TRUE))
# index day è associato al "giorno" dell'osservazione, strike_values conterrà gli strike che osserverò
index_day<-0
strike_values <- c()
strike_file <- file.path(current_dir,optionsfolder, "StrikeStory.csv") #qui scriverò la "storia" dei vari strike
# Loop attraverso i file CSV
for (file in option_files) {
# Estrai la parte variabile (data) dal nome del file utilizzando substr
nome_file <- basename(file)
posizione_trattino <- max(gregexpr("_", nome_file)[[1]])
parte_variabile <- substr(nome_file, posizione_trattino + 1, nchar(nome_file) - 4)
# Converti la parte variabile in un valore "data" e aggiorna la variabile data_variabile
data_variabile <- as.Date(parte_variabile)
# Leggi i dati dal file CSV
dati <- read.csv(file)
# Rimuovi le righe con Call_LastPr uguale a NA
dati <- dati %>% filter(!is.na(Call_LastPr))
if (index_day == 0) {
col_name <- "Strike"
strike_values <<- c(strike_values, dati[[col_name]]) #prelevo tutti gli strike non nulli
} #adesso prendo i "last price Call"
call_last_pr_values <- c()
col_name_2 <- "Call_LastPr"
for (val in strike_values){
filtered_rows <- dati %>% filter(.data[[col_name]] == val)
if (nrow(filtered_rows) > 0) {
call_last_pr_values <- c(call_last_pr_values, filtered_rows[[col_name_2]])
} else {
# Se non ci sono righe corrispondenti, aggiungi un NA
call_last_pr_values <- c(call_last_pr_values, NA)
}
}
if (index_day == 0){ # se index_day == 0, vuol dire che sto cercando gli strike, allora sono all'inizio, quindi creo lo strike_frame
strike_frame <- data.frame(call_last_pr_values)
} else{ #lo strike_frame già esiste, devo solo aggiornarlo
strike_frame <-cbind(strike_frame,call_last_pr_values)
}
index_day <- index_day + 1 #aggiorno l'indice dei giorni passati
write_csv(strike_frame, strike_file)
}
print(strike_frame)
varianze <- apply(strike_frame, 1, var)
clean_strike_frame <- subset(strike_frame, varianze != 0)
# Creazione del grafico
plot(1, 1, type = "n", xlim = c(1,ncol(strike_frame)-1), ylim = c(min(strike_frame), max(strike_frame)),
xlab = "Giorni dall'osservazione iniziale", ylab = "LastCallPrice",
main = "Evoluzione del lastCallPrice in funzione degli strike")
# Aggiunta delle linee per ogni riga del dataframe
for (i in 1:nrow(strike_frame)) {
lines(0:(ncol(strike_frame)-1), strike_frame[i,], col = i)
###### Libraries######
library(timeDate)
library(timeSeries)
library(fBasics)
library(fOptions)
library(tibble)
library("data.table")
library(dplyr)
library(quantmod)
library(reshape2)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(cowplot)
library(urca)
library(moments)
library(lmtest)
###### Paths #####
# Imposto la directory di lavoro sulla directory attuale (ovvero la cartella "dowjones")
current_file <- normalizePath(rstudioapi::getSourceEditorContext()$path)
current_dir <- dirname(current_file)
# Specifica il percorso relativo alla sottocartella (questo csv lo salvo nella sottocartella "data")
datafolder <- "data"
optionsfolder <- "options"
fedinvestfolder <- "fedinvest"
###### Prelievo dei dati del Dow Jones Index da Yahoo Finance + grafico ###############
# Calcolo le date di inizio e fine per l'intervallo di tre anni, a partire dal 2023-07-15
start_date <- "2020-07-15"
end_date <- "2023-07-15"
# Formatto le date nel formato richiesto dall'URL
start_timestamp <- as.POSIXct(start_date)
end_timestamp <- as.POSIXct(end_date)
# Costruisco l'URL del file CSV utilizzando le date di inizio e fine
url <- paste0("https://query1.finance.yahoo.com/v7/finance/download/%5EDJI?period1=",
as.numeric(start_timestamp), "&period2=",
as.numeric(end_timestamp), "&interval=1d&events=history")
# Specifica il nome del file con la data corrente (salvo i dati in dowjones-<dataodierna>)
dow_jones_file <- paste("dowjones_", format(Sys.Date(), "%d-%m-%Y"), ".csv", sep = "")
#specifico quindi il path completo del file, che parte dalla directory attuale, va in "data", e salva nel csv precedentemente dichiarato.
dow_jones_path <- file.path(current_dir, datafolder, dow_jones_file)
# Scarica il file CSV dell'indice Dow Jones degli ultimi tre anni
download.file(url, destfile = dow_jones_path, method = "auto")
# Leggi il file CSV e visualizza i dati
dow_data <- read.csv(dow_jones_path)
head(dow_data)
# Aggiungi la colonna "indice riga"
dow_data$index <- 1:nrow(dow_data)
# Riorganizza l'ordine delle colonne
dow_data <- dow_data[, c("index", names(dow_data)[-ncol(dow_data)])]
# Salva il file CSV modificato
write.csv(dow_data, dow_jones_path, row.names = FALSE)
# Converti la colonna delle date in formato di data
dow_data$Date <- as.Date(dow_data$Date)
# Crea un nuovo grafico con titolo
plot(dow_data$Date, dow_data$Close, type = "l", col = "blue", xlab = "Data", ylab = "Close Value",
main = "Andamento dell'indice Dow Jones ^DJX")
###### Rendimenti giornalieri Logaritmici (grafico + csv)#####################################################
#Utilizzo "dow_data" prodotto sopra, calcolo il rendimento logaritmico
dow_data$Log_Return <-  c(0, diff(log(dow_data$Close)))
# Crea un grafico dei rendimenti giornalieri
plot(dow_data$Date, dow_data$Log_Return, type = "l",col = "black", xlab = "Data", ylab = "Rendimento giornaliero log", main = "Rendimento giornaliero log")
# Aggiungi una griglia al grafico
grid()
#Salvo questi dati in un csv, associandoli prima ad un dataframe contenente la coppia <data, rendimento giornaliero logaritmico>
# Creazione del dataframe dei rendimenti giornalieri
returns_data_log <- data.frame(dow_data$Date, dow_data$Log_Return)
head(returns_data_log)
# Rinomina le colonne del dataframe
colnames(returns_data_log) <- c("data", "rendimento giornaliero log")
# Salva il dataframe nel file "rendimenti.csv"
# Specifica il nome del file con la data corrente (salvo i dati in dowjones-<dataodierna>)
rendimenti_log_file <- paste("rendimentigiornalieriLOG_", format(Sys.Date(), "%d-%m-%Y"), ".csv", sep = "")
#specifico quindi il path completo del file, che parte dalla directory attuale, va in "data", e salva nel csv precedentemente dichiarato.
rendimenti_log_path <- file.path(current_dir, datafolder, rendimenti_log_file)
write.csv(returns_data_log, rendimenti_log_path, row.names = TRUE)
###### Prelievo delle opzioni di DJX #####
# Il nome della variabile contenente i dati include il giorno corrente in cui li scarico.
# Ottengo la data odierna
data_odierna <- format(Sys.Date(), "%Y-%m-%d")
# Crea il nome della variabile con la data odierna
DJX_Opt <- paste0("DJX_Opt_", data_odierna)
DJX_Opt <- getOptionChain("^DJX", Exp="2023-09-15", src='yahoo')
class(DJX_Opt)
length(DJX_Opt)
show(DJX_Opt[[1]])
class(DJX_Opt[[1]])
nrow(DJX_Opt[[1]])
show(DJX_Opt[[2]])
class(DJX_Opt[[2]])
nrow(DJX_Opt[[2]])
show(DJX_Opt[[1]]$Strike)
show(DJX_Opt[[2]]$Strike)
Strike <- sort(union(DJX_Opt[[1]]$Strike, DJX_Opt[[2]]$Strike))
show(Strike)
length(Strike)
Call_Indx <- sapply(Strike, function(x) which(DJX_Opt[[1]]$Strike==x)[1])
Put_Indx <- sapply(Strike, function(x) which(DJX_Opt[[2]]$Strike==x)[1])
DJX_Opt_df <- data.frame(Indx=1:length(Strike),
Call_ContractID=DJX_Opt[[1]]$ContractID[Call_Indx],
Call_Bid=DJX_Opt[[1]]$Bid[Call_Indx],
Call_Ask=DJX_Opt[[1]]$Ask[Call_Indx],
Call_Vol=DJX_Opt[[1]]$Vol[Call_Indx],
Call_OI=DJX_Opt[[1]]$OI[Call_Indx],
Call_PrChg=DJX_Opt[[1]]$Chg[Call_Indx],
Call_PrChgPct=DJX_Opt[[1]]$ChgPct[Call_Indx],
Call_LastTrTime=DJX_Opt[[1]]$LastTradeTime[Call_Indx],
Call_LastPr=DJX_Opt[[1]]$Last[Call_Indx],
Call_ImplVol=DJX_Opt[[1]]$IV[Call_Indx],
Call_ITM=DJX_Opt[[1]]$ITM[Call_Indx],
Strike=Strike,
Put_ITM=DJX_Opt[[2]]$ITM[Put_Indx],
Put_ImplVol=DJX_Opt[[2]]$IV[Put_Indx],
Put_LastPr=DJX_Opt[[2]]$Last[Put_Indx],
Put_LastTrTime=DJX_Opt[[2]]$LastTradeTime[Put_Indx],
Put_PrChgPct=DJX_Opt[[2]]$ChgPct[Put_Indx],
Put_PrChg=DJX_Opt[[2]]$Chg[Put_Indx],
Put_OI=DJX_Opt[[2]]$OI[Put_Indx],
Put_Vol=DJX_Opt[[2]]$Vol[Put_Indx],
Put_Ask=DJX_Opt[[2]]$Ask[Put_Indx],
Put_Bid=DJX_Opt[[2]]$Bid[Put_Indx],
Put_ContractID=DJX_Opt[[2]]$ContractID[Put_Indx])
head(DJX_Opt_df,10)
tail(DJX_Opt_df,10)
#salvo il tutto nella sottodirectory "options"
file_path <- file.path(current_dir, optionsfolder, paste0("DJX_Opt_", data_odierna,".csv"))
head(file_path)
write.csv(DJX_Opt_df, file_path)
###### Plot dei vari strike appena scaricati ####
#mi metto nella sottocartella "options" e prelevo tutti i file posseduti contenenti le options di JDX
options_path <- file.path(current_dir,optionsfolder)
option_files <- sort(list.files(path = options_path, pattern = "DJX_Opt_", full.names = TRUE))
# index day è associato al "giorno" dell'osservazione, strike_values conterrà gli strike che osserverò
index_day<-0
strike_values <- c()
strike_file <- file.path(current_dir,optionsfolder, "StrikeStory.csv") #qui scriverò la "storia" dei vari strike
# Loop attraverso i file CSV
for (file in option_files) {
# Estrai la parte variabile (data) dal nome del file utilizzando substr
nome_file <- basename(file)
posizione_trattino <- max(gregexpr("_", nome_file)[[1]])
parte_variabile <- substr(nome_file, posizione_trattino + 1, nchar(nome_file) - 4)
# Converti la parte variabile in un valore "data" e aggiorna la variabile data_variabile
data_variabile <- as.Date(parte_variabile)
# Leggi i dati dal file CSV
dati <- read.csv(file)
# Rimuovi le righe con Call_LastPr uguale a NA
dati <- dati %>% filter(!is.na(Call_LastPr))
if (index_day == 0) {
col_name <- "Strike"
strike_values <<- c(strike_values, dati[[col_name]]) #prelevo tutti gli strike non nulli
} #adesso prendo i "last price Call"
call_last_pr_values <- c()
col_name_2 <- "Call_LastPr"
for (val in strike_values){
filtered_rows <- dati %>% filter(.data[[col_name]] == val)
if (nrow(filtered_rows) > 0) {
call_last_pr_values <- c(call_last_pr_values, filtered_rows[[col_name_2]])
} else {
# Se non ci sono righe corrispondenti, aggiungi un NA
call_last_pr_values <- c(call_last_pr_values, NA)
}
}
if (index_day == 0){ # se index_day == 0, vuol dire che sto cercando gli strike, allora sono all'inizio, quindi creo lo strike_frame
strike_frame <- data.frame(call_last_pr_values)
} else{ #lo strike_frame già esiste, devo solo aggiornarlo
strike_frame <-cbind(strike_frame,call_last_pr_values)
}
index_day <- index_day + 1 #aggiorno l'indice dei giorni passati
write_csv(strike_frame, strike_file)
}
print(strike_frame)
varianze <- apply(strike_frame, 1, var)
clean_strike_frame <- subset(strike_frame, varianze != 0)
plot(1, 1, type = "n", xlim = c(1,ncol(strike_frame)-1), ylim = c(min(strike_frame), max(strike_frame)),
xlab = "Giorni dall'osservazione iniziale", ylab = "LastCallPrice",
main = "Evoluzione del lastCallPrice in funzione degli strike (anche non variati")
# Aggiunta delle linee per ogni riga del dataframe
for (i in 1:nrow(strike_frame)) {
lines(0:(ncol(strike_frame)-1), strike_frame[i,], col = i)
}
# Creazione del grafico
plot(1, 1, type = "n", xlim = c(1,ncol(clean_strike_frame)-1), ylim = c(min(clean_strike_frame), max(clean_strike_frame)),
xlab = "Giorni dall'osservazione iniziale", ylab = "LastCallPrice",
main = "Evoluzione del lastCallPrice in funzione dei soli strike variati")
# Aggiunta delle linee per ogni riga del dataframe
for (i in 1:nrow(clean_strike_frame)) {
lines(0:(ncol(clean_strike_frame)-1), clean_strike_frame[i,], col = i)
}
###### Libraries######
library(timeDate)
library(timeSeries)
library(fBasics)
library(fOptions)
library(tibble)
library("data.table")
library(dplyr)
library(quantmod)
library(reshape2)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(cowplot)
library(urca)
library(moments)
library(lmtest)
