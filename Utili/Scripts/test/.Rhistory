head(SPX_Opt_2023_04_11_06_16_df,10)
tail(SPX_Opt_2023_04_11_06_16_df,10)
#
Call_LastTrDate_df <- data.frame(Call_LastTrDate=as.Date(SPX_Opt_2023_04_11_06_16_df$Call_LastTrTime, format="%Y-%m-%d"))
class(Call_LastTrDate_df)
head(Call_LastTrDate_df,20)
nrow(Call_LastTrDate_df)
Call_LastTrDate_tb <- table(Call_LastTrDate_df)
class(Call_LastTrDate_tb)
show(Call_LastTrDate_tb)
#
Put_LastTrDate_df <- data.frame(Put_LastTrDate=as.Date(SPX_Opt_2023_04_11_06_16_df$Put_LastTrTime, format="%Y-%m-%d"))
class(Put_LastTrDate_df)
head(Put_LastTrDate_df,20)
nrow(Put_LastTrDate_df)
Put_LastTrDate_tb <- table(Put_LastTrDate_df)
class(Put_LastTrDate_tb)
show(Put_LastTrDate_tb)
#
Call_LastTrDate_2023_04_11_Indx <- SPX_Opt_2023_04_11_06_16_df$Indx[which(Call_LastTrDate_df$Call_LastTrDate=="2023-04-11")]
show(Call_LastTrDate_2023_04_11_Indx)
length(Call_LastTrDate_2023_04_11_Indx)
Put_LastTrDate_2023_04_11_Indx <- SPX_Opt_2023_04_11_06_16_df$Indx[which(Put_LastTrDate_df$Put_LastTrDate=="2023-04-11")]
show(Put_LastTrDate_2023_04_11_Indx)
length(Put_LastTrDate_2023_04_11_Indx)
Call_Put_2023_04_11_Indx <- intersect(Call_LastTrDate_2023_04_11_Indx, Put_LastTrDate_2023_04_11_Indx)
show(Call_Put_2023_04_11_Indx)
length(Call_Put_2023_04_11_Indx)
# 34
#
Call_LastTrDate_2023_04_10_Indx <- SPX_Opt_2023_04_11_06_16_df$Indx[which(Call_LastTrDate_df$Call_LastTrDate=="2023-04-10")]
show(Call_LastTrDate_2023_04_10_Indx)
length(Call_LastTrDate_2023_04_10_Indx)
Put_LastTrDate_2023_04_10_Indx <- SPX_Opt_2023_04_11_06_16_df$Indx[which(Put_LastTrDate_df$Put_LastTrDate=="2023-04-10")]
show(Put_LastTrDate_2023_04_10_Indx)
length(Put_LastTrDate_2023_04_10_Indx)
Call_Put_2023_04_10_Indx <- intersect(Call_LastTrDate_2023_04_10_Indx, Put_LastTrDate_2023_04_10_Indx)
show(Call_Put_2023_04_10_Indx)
length(Call_Put_2023_04_10_Indx)
# 5
#
# Put-Call parity
# P_0 = C_0 - S_0 + K/(1+r_f)
# C_0 - P_0 = S_0 - K/(1+r_f)
#
x <- SPX_Opt_2023_04_11_06_16_df$Strike[Call_Put_2023_04_11_Indx]
show(x)
length(x)
y <- SPX_Opt_2023_04_11_06_16_df$Call_LastPr[Call_Put_2023_04_11_Indx]-SPX_Opt_2023_04_11_06_16_df$Put_LastPr[Call_Put_2023_04_11_Indx]
show(y)
length(y)
#
Data_df <- data.frame(x,y)
nrow(Data_df)
Data_df <- na.omit(Data_df)
nrow(Data_df)
head(Data_df,10)
tail(Data_df,10)
rownames(Data_df) <- 1:nrow(Data_df)
nrow(Data_df)
head(Data_df,10)
tail(Data_df,10)
n <- nrow(Data_df)
title_content <- bquote(atop("University of Roma \"Tor Vergata\" - \u0040 MPSMF 2022-2023",
paste("Scatter Plot of the Call-Put Difference Against the Strike Price")))
subtitle_content <- bquote(paste("Data set size",~~.(n),~~"sample points;    Evaluation Date 2023-04-11;   Maturity Date 2023-06-16"))
caption_content <- "Author: Roberto Monte"
# To obtain the sub-multiples of the length of the data set as a hint on the number of breaks to use
# library(numbers)
# primeFactors(n)
x_breaks_num <- 8
x_breaks_low <- min(Data_df$x)
x_breaks_up <- max(Data_df$x)
x_binwidth <- floor((x_breaks_up-x_breaks_low)/x_breaks_num)
x_breaks <- seq(from=x_breaks_low, to=x_breaks_up, by=x_binwidth)
if((x_breaks_up-max(x_breaks))>x_binwidth/2){x_breaks <- c(x_breaks,x_breaks_up)}
x_labs <- format(x_breaks, scientific=FALSE)
J <- 0.2
x_lims <- c(x_breaks_low-J*x_binwidth,x_breaks_up+J*x_binwidth)
x_name <- bquote("strike")
y_breaks_num <- 10
y_max <- max(na.rm(Data_df$y))
y_min <- min(na.rm(Data_df$y))
y_binwidth <- round((y_max-y_min)/y_breaks_num, digits=3)
y_breaks_low <- y_min
y_breaks_up <- y_max
y_breaks <- seq(from=y_breaks_low, to=y_breaks_up, by=y_binwidth)
if((y_breaks_up-max(y_breaks))>y_binwidth/2){y_breaks <- c(y_breaks,y_breaks_up)}
y_labs <- format(y_breaks, scientific=FALSE)
y_name <- bquote("call-put difference")
K <- 0.2
y_lims <- c((y_breaks_low-K*y_binwidth), (y_breaks_up+K*y_binwidth))
col_1 <- bquote("data set sample points")
col_2 <- bquote("regression line")
col_3 <- bquote("LOESS curve")
leg_labs <- c(col_1, col_2, col_3)
leg_cols <- c("col_1"="blue", "col_2"="green", "col_3"="red")
leg_ord <- c("col_1", "col_2", "col_3")
Call_Put_Strike_Pr_2023_04_11_06_16_sp <- ggplot(Data_df, aes(x=x, y=y)) +
geom_smooth(alpha=1, linewidth=0.8, linetype="dashed", aes(color="col_3"),
method="loess", formula=y ~ x, se=FALSE, fullrange = FALSE) +
geom_smooth(alpha=1, linewidth=0.8, linetype="solid", aes(color="col_2"),
method="lm" , formula=y ~ x, se=FALSE, fullrange=FALSE) +
geom_point(alpha=1, size=1.0, shape=19, aes(color="col_1")) +
scale_x_continuous(name=x_name, breaks=x_breaks, label=x_labs, limits=x_lims) +
scale_y_continuous(name=y_name, breaks=y_breaks, labels=NULL, limits=y_lims,
sec.axis=sec_axis(~., breaks=y_breaks, labels=y_labs)) +
ggtitle(title_content) +
labs(subtitle=subtitle_content, caption=caption_content) +
scale_colour_manual(name="Legend", labels=leg_labs, values=leg_cols, breaks=leg_ord,
guide=guide_legend(override.aes=list(shape=c(19,NA,NA),
linetype=c("blank", "solid", "dashed")))) +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5),
axis.text.x=element_text(angle=0, vjust=1),
legend.key.width=unit(1.0,"cm"), legend.position="bottom")
plot(Call_Put_Strike_Pr_2023_04_11_06_16_sp)
#
PutCall_par_lm <- lm(y~x)
summary(PutCall_par_lm)
#
S_0 <- PutCall_par_lm$coefficients[1]
show(S_0)
#####SECONDO ESEGUI######
# 4094.027
#
# SPX Market Price 4,108.94 -0.17 (-0.00%) At close: April 11 04:55PM EDT
#
# -1/(1+r_f)=c, -1/c=1+r_f, -(1/c+1)=r_f,
#
r_f <- -(1/PutCall_par_lm$coefficients[2]+1)
show(r_f)
# 0.01144599
#
Days_to_Mat <- as.vector(difftime("2023-06-16", "2023-04-11"))
show(Days_to_Mat)
# 66
#
r_f_a=(1+r_f)^(365.2425/Days_to_Mat)-1
show(r_f_a)
# 0.06500779
#
label_percent(accuracy = 0.001)(r_f_a)
# 6.501%
#
# Put-Call parity
# P_0 = C_0 - S_0 + K/(1+r_f)
# P_0 - C_0 + S_0 = K/(1+r_f)
# SPX Market Price 4,108.94 -0.17 (-0.00%) At close: April 11 04:55PM EDT
#
S_0 <- 4108.94
#
x <- SPX_Opt_2023_04_11_06_16_df$Strike[Call_Put_2023_04_11_Indx]
show(x)
length(x)
y <- SPX_Opt_2023_04_11_06_16_df$Put_LastPr[Call_Put_2023_04_11_Indx]-SPX_Opt_2023_04_11_06_16_df$Call_LastPr[Call_Put_2023_04_11_Indx]+S_0
show(y)
length(y)
#
Data_df <- data.frame(x,y)
nrow(Data_df)
Data_df <- na.omit(Data_df)
nrow(Data_df)
head(Data_df,10)
tail(Data_df,10)
rownames(Data_df) <- 1:nrow(Data_df)
nrow(Data_df)
head(Data_df,10)
tail(Data_df,10)
n <- nrow(Data_df)
title_content <- bquote(atop("University of Roma \"Tor Vergata\" - \u0040 MPSMF 2022-2023",
paste("Scatter Plot of the Put-Call+Price Combination Against the Strike Price")))
subtitle_content <- bquote(paste("Data set size",~~.(n),~~"sample points;    Evaluation Date 2023-04-11;   Maturity Date 2023-06-16"))
caption_content <- "Author: Roberto Monte"
# To obtain the sub-multiples of the length of the data set as a hint on the number of breaks to use
# library(numbers)
# primeFactors(n)
x_breaks_num <- 8
x_breaks_low <- min(Data_df$x)
x_breaks_up <- max(Data_df$x)
x_binwidth <- floor((x_breaks_up-x_breaks_low)/x_breaks_num)
x_breaks <- seq(from=x_breaks_low, to=x_breaks_up, by=x_binwidth)
if((x_breaks_up-max(x_breaks))>x_binwidth/2){x_breaks <- c(x_breaks,x_breaks_up)}
x_labs <- format(x_breaks, scientific=FALSE)
J <- 0.2
x_lims <- c(x_breaks_low-J*x_binwidth,x_breaks_up+J*x_binwidth)
x_name <- bquote("strike")
y_breaks_num <- 10
y_max <- max(na.rm(Data_df$y))
y_min <- min(na.rm(Data_df$y))
y_binwidth <- round((y_max-y_min)/y_breaks_num, digits=3)
y_breaks_low <- y_min
y_breaks_up <- y_max
y_breaks <- seq(from=y_breaks_low, to=y_breaks_up, by=y_binwidth)
if((y_breaks_up-max(y_breaks))>y_binwidth/2){y_breaks <- c(y_breaks,y_breaks_up)}
y_labs <- format(y_breaks, scientific=FALSE)
y_name <- bquote("call-put difference")
K <- 0.2
y_lims <- c((y_breaks_low-K*y_binwidth), (y_breaks_up+K*y_binwidth))
col_1 <- bquote("data set sample points")
col_2 <- bquote("regression line")
col_3 <- bquote("LOESS curve")
leg_labs <- c(col_1, col_2, col_3)
leg_cols <- c("col_1"="blue", "col_2"="green", "col_3"="red")
leg_ord <- c("col_1", "col_2", "col_3")
Call_Put_Price_Strike_Pr_2023_04_11_06_16_sp <- ggplot(Data_df, aes(x=x, y=y)) +
geom_smooth(alpha=1, linewidth=0.8, linetype="dashed", aes(color="col_3"),
method="loess", formula=y ~ x, se=FALSE, fullrange = FALSE) +
geom_smooth(alpha=1, linewidth=0.8, linetype="solid", aes(color="col_2"),
method="lm" , formula=y ~ x, se=FALSE, fullrange=FALSE) +
geom_point(alpha=1, size=1.0, shape=19, aes(color="col_1")) +
scale_x_continuous(name=x_name, breaks=x_breaks, label=x_labs, limits=x_lims) +
scale_y_continuous(name=y_name, breaks=y_breaks, labels=NULL, limits=y_lims,
sec.axis=sec_axis(~., breaks=y_breaks, labels=y_labs)) +
ggtitle(title_content) +
labs(subtitle=subtitle_content, caption=caption_content) +
scale_colour_manual(name="Legend", labels=leg_labs, values=leg_cols, breaks=leg_ord,
guide=guide_legend(override.aes=list(shape=c(19,NA,NA),
linetype=c("blank", "solid", "dashed")))) +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5),
axis.text.x=element_text(angle=0, vjust=1),
legend.key.width=unit(1.0,"cm"), legend.position="bottom")
plot(Call_Put_Price_Strike_Pr_2023_04_11_06_16_sp)
#
PutCallPrice_par_lm <- lm(y~0+x)
summary(PutCallPrice_par_lm)
#
# 1/(1+r_f)=c, 1/c=1+r_f, 1/c-1=r_f,
#
r_f <- 1/PutCallPrice_par_lm$coefficients[1]-1
show(r_f)
# 0.007666662
#
Days_to_Mat <- as.vector(difftime("2023-06-16", "2023-04-11"))
show(Days_to_Mat)
# 66
#
r_f_a=(1+r_f)^(365.2425/Days_to_Mat)-1
show(r_f_a)
# 0.04317122
#
label_percent(accuracy = 0.001)(r_f_a)
# 4.317%
#
SPX_Opt_2023_05_18_06_16_df <- read.csv("SPX_Option_Chain_2023_05_18_06_16.csv")
class(SPX_Opt_2023_05_18_06_16_df)
head(SPX_Opt_2023_05_18_06_16_df,10)
tail(SPX_Opt_2023_05_18_06_16_df,10)
#
Call_LastTrDate_df <- data.frame(Call_LastTrDate=as.Date(SPX_Opt_2023_05_18_06_16_df$Call_LastTrTime))
class(Call_LastTrDate_df)
head(Call_LastTrDate_df,20)
nrow(Call_LastTrDate_df)
Call_LastTrDate_tb <- table(Call_LastTrDate_df)
class(Call_LastTrDate_tb)
show(Call_LastTrDate_tb)
#
Put_LastTrDate_df <- data.frame(Put_LastTrDate=as.Date(SPX_Opt_2023_05_18_06_16_df$Put_LastTrTime))
class(Put_LastTrDate_df)
head(Put_LastTrDate_df,20)
nrow(Put_LastTrDate_df)
Put_LastTrDate_tb <- table(Put_LastTrDate_df)
class(Put_LastTrDate_tb)
show(Put_LastTrDate_tb)
#
Call_LastTrDate_2023_05_18_Indx <- SPX_Opt_2023_05_18_06_16_df$Indx[which(Call_LastTrDate_df$Call_LastTrDate=="2023-05-18")]
show(Call_LastTrDate_2023_05_18_Indx)
length(Call_LastTrDate_2023_05_18_Indx)
Put_LastTrDate_2023_05_18_Indx <- SPX_Opt_2023_05_18_06_16_df$Indx[which(Put_LastTrDate_df$Put_LastTrDate=="2023-05-18")]
show(Put_LastTrDate_2023_05_18_Indx)
length(Put_LastTrDate_2023_05_18_Indx)
Call_Put_2023_05_18_Indx <- intersect(Call_LastTrDate_2023_05_18_Indx, Put_LastTrDate_2023_05_18_Indx)
show(Call_Put_2023_05_18_Indx)
length(Call_Put_2023_05_18_Indx)
# 69
#
Call_LastTrDate_2023_05_17_Indx <- SPX_Opt_2023_05_18_06_16_df$Indx[which(Call_LastTrDate_df$Call_LastTrDate=="2023-05-17")]
show(Call_LastTrDate_2023_05_17_Indx)
length(Call_LastTrDate_2023_05_17_Indx)
Put_LastTrDate_2023_05_17_Indx <- SPX_Opt_2023_05_18_06_16_df$Indx[which(Put_LastTrDate_df$Put_LastTrDate=="2023-05-17")]
show(Put_LastTrDate_2023_05_17_Indx)
length(Put_LastTrDate_2023_05_17_Indx)
Call_Put_2023_05_17_Indx <- intersect(Call_LastTrDate_2023_05_17_Indx, Put_LastTrDate_2023_05_17_Indx)
show(Call_Put_2023_05_17_Indx)
length(Call_Put_2023_05_17_Indx)
# 1
#
# Put-Call parity
# P_0 = C_0 - S_0 + K/(1+r_f)
# C_0-P_0 = S_0 - K/(1+r_f)
#
x <- SPX_Opt_2023_05_18_06_16_df$Strike[Call_Put_2023_05_18_Indx]
show(x)
length(x)
y <- SPX_Opt_2023_05_18_06_16_df$Call_LastPr[Call_Put_2023_05_18_Indx]-SPX_Opt_2023_05_18_06_16_df$Put_LastPr[Call_Put_2023_05_18_Indx]
show(y)
length(y)
#
Data_df <- data.frame(x,y)
n <- nrow(Data_df)
title_content <- bquote(atop("University of Roma \"Tor Vergata\" - \u0040 MPSMF 2022-2023",
paste("Scatter Plot of the Call-Put Difference Against the Strike Price")))
subtitle_content <- bquote(paste("Data set size",~~.(n),~~"sample points;    Evaluation Date 2023-05-18;   Maturity Date 2023-06-16"))
caption_content <- "Author: Roberto Monte"
# To obtain the submultiples of the length of the data set as a hint on the number of breaks to use
# library(numbers)
# primeFactors(n)
x_breaks_num <- 23
x_breaks_low <- min(Data_df$x)
x_breaks_up <- max(Data_df$x)
x_binwidth <- floor((x_breaks_up-x_breaks_low)/x_breaks_num)
x_breaks <- seq(from=x_breaks_low, to=x_breaks_up, by=x_binwidth)
if((x_breaks_up-max(x_breaks))>x_binwidth/2){x_breaks <- c(x_breaks,x_breaks_up)}
x_labs <- format(x_breaks, scientific=FALSE)
J <- 0
x_lims <- c(x_breaks_low-J*x_binwidth,x_breaks_up+J*x_binwidth)
x_name <- bquote("strike")
y_breaks_num <- 10
y_max <- max(na.rm(Data_df$y))
y_min <- min(na.rm(Data_df$y))
y_binwidth <- round((y_max-y_min)/y_breaks_num, digits=3)
y_breaks_low <- y_min
y_breaks_up <- y_max
y_breaks <- seq(from=y_breaks_low, to=y_breaks_up, by=y_binwidth)
if((y_breaks_up-max(y_breaks))>y_binwidth/2){y_breaks <- c(y_breaks,y_breaks_up)}
y_labs <- format(y_breaks, scientific=FALSE)
y_name <- bquote("call-put difference")
K <- 1
y_lims <- c((y_breaks_low-K*y_binwidth), (y_breaks_up+K*y_binwidth))
col_1 <- bquote("data set sample points")
col_2 <- bquote("regression line")
col_3 <- bquote("LOESS curve")
leg_labs <- c(col_1, col_2, col_3)
leg_cols <- c("col_1"="blue", "col_2"="green", "col_3"="red")
leg_ord <- c("col_1", "col_2", "col_3")
Call_Put_Strike_Pr_2023_05_18_06_16_sp <- ggplot(Data_df, aes(x=x, y=y)) +
geom_smooth(alpha=1, linewidth=0.8, linetype="dashed", aes(color="col_3"),
method="loess", formula=y ~ x, se=FALSE) +
geom_smooth(alpha=1, linewidth=0.8, linetype="solid", aes(color="col_2"),
method="lm" , formula=y ~ x, se=FALSE, fullrange=TRUE) +
geom_point(alpha=1, size=1.0, shape=19, aes(color="col_1")) +
scale_x_continuous(name=x_name, breaks=x_breaks, label=x_labs, limits=x_lims) +
scale_y_continuous(name=y_name, breaks=y_breaks, labels=NULL, limits=y_lims,
sec.axis=sec_axis(~., breaks=y_breaks, labels=y_labs)) +
ggtitle(title_content) +
labs(subtitle=subtitle_content, caption=caption_content) +
scale_colour_manual(name="Legend", labels=leg_labs, values=leg_cols, breaks=leg_ord,
guide=guide_legend(override.aes=list(shape=c(19,NA,NA),
linetype=c("blank", "solid", "dashed")))) +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5),
axis.text.x=element_text(angle=0, vjust=1),
legend.key.width=unit(1.0,"cm"), legend.position="bottom")
plot(Call_Put_Strike_Pr_2023_05_18_06_16_sp)
#
PutCall_par_lm <- lm(y~x)
summary(PutCall_par_lm)
#
S_0 <- PutCall_par_lm$coefficients[1]
show(S_0)
#####TERZO ESEGUI##################################
# 4189.735
# SPX Market Price 4,198.05 At close: May 18 :55PM EDT
#
r_f <- -(1/PutCall_par_lm$coefficients[2]+1)
show(r_f)
# 0.00211723
#
Days_to_Mat <- as.vector(difftime("2023-06-16", "2023-05-18"))
show(Days_to_Mat)
# 29
#
r_f_a=(1+r_f)^(365.2425/Days_to_Mat)-1
show(r_f_a)
# 0.02699536
#
label_percent(accuracy = 0.001)(r_f_a)
# 2.700%
#
# Put-Call parity
# P_0 = C_0 - S_0 + K/(1+r_f)
# P_0 - C_0 + S_0 = K/(1+r_f)
#
S_0 <- 4198.05
#
x <- SPX_Opt_2023_05_18_06_16_df$Strike[Call_Put_2023_05_18_Indx]
show(x)
length(x)
y <- SPX_Opt_2023_05_18_06_16_df$Put_LastPr[Call_Put_2023_05_18_Indx]-SPX_Opt_2023_05_18_06_16_df$Call_LastPr[Call_Put_2023_05_18_Indx]+S_0
show(y)
length(y)
#
Data_df <- data.frame(x,y)
n <- nrow(Data_df)
title_content <- bquote(atop("University of Roma \"Tor Vergata\" - \u0040 MPSMF 2022-2023",
paste("Scatter Plot of the Call-Put Difference Adjusted by the Stock Price Against the Strike Price")))
subtitle_content <- bquote(paste("Data set size",~~.(n),~~"sample points;    Evaluation Date 2023-05-18;   Maturity Date 2023-06-16"))
caption_content <- "Author: Roberto Monte"
# To obtain the sub-multiples of the length of the data set as a hint on the number of breaks to use
# library(numbers)
# primeFactors(n)
x_breaks_num <- 13
x_breaks_low <- Data_df$x[1]
x_breaks_up <- Data_df$x[n]
x_binwidth <- floor((x_breaks_up-x_breaks_low)/x_breaks_num)
x_breaks <- seq(from=x_breaks_low, to=x_breaks_up, by=x_binwidth)
if((x_breaks_up-max(x_breaks))>x_binwidth/2){x_breaks <- c(x_breaks,x_breaks_up)}
x_labs <- format(x_breaks, scientific=FALSE)
J <- 0
x_lims <- c(x_breaks_low-J*x_binwidth,x_breaks_up+J*x_binwidth)
x_name <- bquote("strike")
y_breaks_num <- 10
y_max <- max(na.rm(Data_df$y))
y_min <- min(na.rm(Data_df$y))
y_binwidth <- round((y_max-y_min)/y_breaks_num, digits=3)
y_breaks_low <- y_min
y_breaks_up <- y_max
y_breaks <- seq(from=y_breaks_low, to=y_breaks_up, by=y_binwidth)
if((y_breaks_up-max(y_breaks))>y_binwidth/2){y_breaks <- c(y_breaks,y_breaks_up)}
y_labs <- format(y_breaks, scientific=FALSE)
y_name <- bquote("call-put difference")
K <- 1
y_lims <- c((y_breaks_low-K*y_binwidth), (y_breaks_up+K*y_binwidth))
col_1 <- bquote("data set sample points")
col_2 <- bquote("regression line")
col_3 <- bquote("LOESS curve")
leg_labs <- c(col_1, col_2, col_3)
leg_cols <- c("col_1"="blue", "col_2"="green", "col_3"="red")
leg_ord <- c("col_1", "col_2", "col_3")
Call_Put_Price_Strike_Pr_2023_05_18_06_16_sp <- ggplot(Data_df, aes(x=x, y=y)) +
geom_smooth(alpha=1, linewidth=0.8, linetype="dashed", aes(color="col_3"),
method="loess", formula=y ~ x, se=FALSE) +
geom_smooth(alpha=1, linewidth=0.8, linetype="solid", aes(color="col_2"),
method="lm" , formula=y ~ x, se=FALSE, fullrange=TRUE) +
geom_point(alpha=1, size=1.0, shape=19, aes(color="col_1")) +
scale_x_continuous(name=x_name, breaks=x_breaks, label=x_labs, limits=x_lims) +
scale_y_continuous(name=y_name, breaks=y_breaks, labels=NULL, limits=y_lims,
sec.axis=sec_axis(~., breaks=y_breaks, labels=y_labs)) +
ggtitle(title_content) +
labs(subtitle=subtitle_content, caption=caption_content) +
scale_colour_manual(name="Legend", labels=leg_labs, values=leg_cols, breaks=leg_ord,
guide=guide_legend(override.aes=list(shape=c(19,NA,NA),
linetype=c("blank", "solid", "dashed")))) +
theme(plot.title=element_text(hjust=0.5), plot.subtitle=element_text(hjust=0.5),
axis.text.x=element_text(angle=0, vjust=1),
legend.key.width=unit(1.0,"cm"), legend.position="bottom")
plot(Call_Put_Price_Strike_Pr_2023_05_18_06_16_sp)
#
PutCallPrice_par_lm <- lm(y~0+x)
summary(PutCallPrice_par_lm)
#
r_f <- 1/PutCallPrice_par_lm$coefficients[1]-1
show(r_f)
# 8.067738e-05
#
Days_to_Mat <- as.vector(difftime("2023-06-16", "2023-05-18"))
show(Days_to_Mat)
# 29
#
r_f_a=(1+r_f)^(365.2425/Days_to_Mat)-1
show(r_f_a)
# 0.001016572
#
label_percent(accuracy = 0.001)(r_f_a)
# 0.102%
#
#####QUI DA ERRORE SULLA DATA####SOTTO NON CONTINUO PER QUESTO MOTIVO###################################################################################################################
# library(quantmod)
SPX_Opt_2023_05_12 <- getOptionChain("^SPX", Exp="2023-05-12", src='yahoo')
#####QUI DA ERRORE SULLA DATA####SOTTO NON CONTINUO PER QUESTO MOTIVO###################################################################################################################
# library(quantmod)
SPX_Opt_2023_05_12 <- getOptionChain("^SPX", Exp="2023-07-28", src='yahoo')
class(SPX_Opt_2023_05_12)
length(SPX_Opt_2023_05_12)
show(SPX_Opt_2023_05_12[[1]])
class(SPX_Opt_2023_05_12[[1]])
nrow(SPX_Opt_2023_05_12[[1]])
show(SPX_Opt_2023_05_12[[2]])
class(SPX_Opt_2023_05_12[[2]])
nrow(SPX_Opt_2023_05_12[[2]])
show(SPX_Opt_2023_05_12[[1]]$Strike)
show(SPX_Opt_2023_05_12[[2]]$Strike)
Strike <- sort(union(SPX_Opt_2023_05_12[[1]]$Strike, SPX_Opt_2023_05_12[[2]]$Strike))
show(Strike)
length(Strike)
Call_Indx <- sapply(Strike, function(x) which(SPX_Opt_2023_05_12[[1]]$Strike==x)[1])
Put_Indx <- sapply(Strike, function(x) which(SPX_Opt_2023_05_12[[2]]$Strike==x)[1])
SPX_Opt_2023_05_12_df <- data.frame(Indx=1:length(Strike),
Call_ContractID=SPX_Opt_2023_05_12[[1]]$ContractID[Call_Indx],
Call_Bid=SPX_Opt_2023_05_12[[1]]$Bid[Call_Indx],
Call_Ask=SPX_Opt_2023_05_12[[1]]$Ask[Call_Indx],
Call_Vol=SPX_Opt_2023_05_12[[1]]$Vol[Call_Indx],
Call_OI=SPX_Opt_2023_05_12[[1]]$OI[Call_Indx],
Call_PrChg=SPX_Opt_2023_05_12[[1]]$Chg[Call_Indx],
Call_PrChgPct=SPX_Opt_2023_05_12[[1]]$ChgPct[Call_Indx],
Call_LastTrTime=SPX_Opt_2023_05_12[[1]]$LastTradeTime[Call_Indx],
Call_LastPr=SPX_Opt_2023_05_12[[1]]$Last[Call_Indx],
Call_ImplVol=SPX_Opt_2023_05_12[[1]]$IV[Call_Indx],
Call_ITM=SPX_Opt_2023_05_12[[1]]$ITM[Call_Indx],
Strike=Strike,
Put_ITM=SPX_Opt_2023_05_12[[2]]$ITM[Put_Indx],
Put_ImplVol=SPX_Opt_2023_05_12[[2]]$IV[Put_Indx],
Put_LastPr=SPX_Opt_2023_05_12[[2]]$Last[Put_Indx],
Put_LastTrTime=SPX_Opt_2023_05_12[[2]]$LastTradeTime[Put_Indx],
Put_PrChgPct=SPX_Opt_2023_05_12[[2]]$ChgPct[Put_Indx],
Put_PrChg=SPX_Opt_2023_05_12[[2]]$Chg[Put_Indx],
Put_OI=SPX_Opt_2023_05_12[[2]]$OI[Put_Indx],
Put_Vol=SPX_Opt_2023_05_12[[2]]$Vol[Put_Indx],
Put_Ask=SPX_Opt_2023_05_12[[2]]$Ask[Put_Indx],
Put_Bid=SPX_Opt_2023_05_12[[2]]$Bid[Put_Indx],
Put_ContractID=SPX_Opt_2023_05_12[[2]]$ContractID[Put_Indx])
head(SPX_Opt_2023_05_12_df,10)
tail(SPX_Opt_2023_05_12_df,10)
write.csv(SPX_Opt_2023_05_12_df,"C:/Users/rober/Documents/My Documents/My Teaching Documents/MPSFM/R-Scripts & Data/Data/SPX_Option_Chain_2023_05_12.csv")
